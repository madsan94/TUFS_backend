{
  "_from": "date-and-time",
  "_id": "date-and-time@0.6.3",
  "_inBundle": false,
  "_integrity": "sha512-lcWy3AXDRJOD7MplwZMmNSRM//kZtJaLz4n6D1P5z9wEmZGBKhJRBIr1Xs9KNQJmdXPblvgffynYji4iylUTcA==",
  "_location": "/date-and-time",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "date-and-time",
    "fetchSpec": "latest",
    "name": "date-and-time",
    "raw": "date-and-time",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/date-and-time/-/date-and-time-0.6.3.tgz",
  "_shasum": "2daee52df67c28bd93bce862756ac86b68cf4237",
  "_spec": "date-and-time",
  "_where": "/home/sanket/Desktop/TUFS",
  "author": {
    "name": "KNOWLEDGECODE"
  },
  "bugs": {
    "url": "https://github.com/knowledgecode/date-and-time/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "A Minimalist DateTime utility for Node.js and the browser",
  "devDependencies": {
    "babel-preset-env": "^1.7.0",
    "babelify": "^7.3.0",
    "browserify": "^14.5.0",
    "expect.js": "^0.3.1",
    "mocha": "^5.2.0",
    "mocha-phantomjs-core": "^2.1.2",
    "phantomjs-prebuilt": "^2.1.16"
  },
  "homepage": "https://github.com/knowledgecode/date-and-time",
  "keywords": [
    "date",
    "format",
    "parse",
    "time",
    "utility"
  ],
  "license": "MIT",
  "main": "date-and-time.js",
  "name": "date-and-time",
  "optionalDependencies": {},
  "readme": "# date-and-time\n[![Circle CI](https://circleci.com/gh/knowledgecode/date-and-time.svg?style=shield)](https://circleci.com/gh/knowledgecode/date-and-time)  \n\n## WHY\nSince JS modules are usually used in combination, we think trying to keep the size of each module small is important. This date time utility is one of the modules aiming for minimal and efficient.\n\n## Features\n- Minimalist. Only has **1.9k** (minified and gzipped)\n- Universal (Isomorphic)\n- Multi language support\n- Not extending built-in Date object\n- Browserify support\n- Legacy IE support. IE6+\n\n## Installation\nvia npm:\n```shell\n$ npm install date-and-time --save\n```\nvia Bower (DEPRECATED):\n```shell\n$ bower install date-and-time\n```\ndirectly:\n```html\n<script src=\"date-and-time.min.js\"></script>\n```\n\n## Changes\n- `parse()`\n    - Parsing a string stricter\n    - Added white space as a wildcard character\n    - Fixed a daylight saving time issue\n\n## Usage\nNode.js:\n```javascript\nlet date = require('date-and-time');\n```\nbabelify:\n```javascript\nimport date from './date-and-time';\n```\nAMD:\n```javascript\nrequire(['date-and-time'], function (date) {\n});\n```\nthe browser:\n```javascript\nwindow.date;    // global object\n```\n\n## API\n\n### format(dateObj, formatString[, utc])\n- {object} **dateObj** - date object\n- {string} **formatString** - format string\n- {boolean} [**utc**] - output as UTC *(optional)*\n\n```javascript\nlet now = new Date();\ndate.format(now, 'YYYY/MM/DD HH:mm:ss');    // => '2015/01/02 23:14:05'\ndate.format(now, 'ddd MMM DD YYYY');        // => 'Fri Jan 02 2015'\ndate.format(now, 'hh:mm A [GMT]Z');         // => '11:14 p.m. GMT-0800'\ndate.format(now, 'hh:mm A [GMT]Z', true);   // => '07:14 a.m. GMT+0000'\n```\n\n| token        | meaning     | example           |\n|:-------------|:------------|:------------------|\n| YYYY         | year        | 0999, 2015        |\n| YY           | year        | 15, 99            |\n| Y            | year        | 999, 2015         |\n| MMMM         | month       | January, December |\n| MMM          | month       | Jan, Dec          |\n| MM           | month       | 01, 12            |\n| M            | month       | 1, 12             |\n| DD           | day         | 02, 31            |\n| D            | day         | 2, 31             |\n| dddd         | day of week | Friday, Sunday    |\n| ddd          | day of week | Fri, Sun          |\n| dd           | day of week | Fr, Su            |\n| HH           | hour-24     | 23, 08            |\n| H            | hour-24     | 23, 8             |\n| A            | meridiem    | a.m., p.m.        |\n| hh           | hour-12     | 11, 08            |\n| h            | hour-12     | 11, 8             |\n| mm           | minute      | 14, 07            |\n| m            | minute      | 14, 7             |\n| ss           | second      | 05, 10            |\n| s            | second      | 5, 10             |\n| SSS          | millisecond | 753, 022          |\n| SS           | millisecond | 75, 02            |\n| S            | millisecond | 7, 0              |\n| Z            | timezone    | +0100, -0800      |\n\n#### NOTE\n`[...]` in the `formatString` will be a comment:\n```javascript\ndate.format(new Date(), 'DD-[MM]-YYYY');    // => '02-MM-2015'\ndate.format(new Date(), '[DD-[MM]-YYYY]');  // => 'DD-[MM]-YYYY'\n```\n\n### parse(dateString, formatString[, utc])\n- {string} **dateString** - date string\n- {string} **formatString** - format string\n- {boolean} [**utc**] - input as UTC *(optional)*\n\n```javascript\ndate.parse('2015/01/02 23:14:05', 'YYYY/MM/DD HH:mm:ss');   // => date object\ndate.parse('02-01-2015', 'DD-MM-YYYY');                     // => date object\ndate.parse('11:14:05 p.m.', 'hh:mm:ss A');                  // => (Jan 1 1970 23:14:05 GMT-0800)\ndate.parse('11:14:05 p.m.', 'hh:mm:ss A', true);            // => (Jan 1 1970 15:14:05 GMT-0800)\ndate.parse('Jam 1 2017', 'MMM D YYYY');                     // => NaN\ndate.parse('Feb 29 2016', 'MMM D YYYY');                    // => date object\ndate.parse('Feb 29 2017', 'MMM D YYYY');                    // => NaN\n```\n\n| token        | meaning     | example           |\n|:-------------|:------------|:------------------|\n| YYYY         | year        | 2015, 1999        |\n| YY           | year        | 15, 99            |\n| MMMM         | month       | January, December |\n| MMM          | month       | Jan, Dec          |\n| MM           | month       | 01, 12            |\n| M            | month       | 1, 12             |\n| DD           | day         | 02, 31            |\n| D            | day         | 2, 31             |\n| HH           | hour-24     | 23, 08            |\n| H            | hour-24     | 23, 8             |\n| hh           | hour-12     | 11, 08            |\n| h            | hour-12     | 11, 8             |\n| A            | meridiem    | a.m., p.m.        |\n| mm           | minute      | 14, 07            |\n| m            | minute      | 14, 7             |\n| ss           | second      | 05, 10            |\n| s            | second      | 5, 10             |\n| SSS          | millisecond | 753, 022          |\n| SS           | millisecond | 75, 02            |\n| S            | millisecond | 7, 0              |\n\n#### NOTE 1\nThe minimum year that can be parsed is year 100, the maximum year is year 9999. Year 69 or less are translated into 2000s, year 70 or more and year 99 or less are translated into 1900s.\n```javascript\ndate.parse('Dec 31 100', 'MMM d YYYY');     // => (Dec 31 100)\ndate.parse('Dec 31 9999', 'MMM d YYYY');    // => (Dec 31 9999)\ndate.parse('Dec 31 0', 'MMM d YYYY');       // => (Dec 31 2000)\ndate.parse('Dec 31 69', 'MMM d YYYY');      // => (Dec 31 2069)\ndate.parse('Dec 31 70', 'MMM d YYYY');      // => (Dec 31 1970)\ndate.parse('Dec 31 99', 'MMM d YYYY');      // => (Dec 31 1999)\n```\n\n#### NOTE 2\nWhen using `hh` or `h` (hour-12), need to use together `A` (meridiem).\n\n### isValid(dateString, formatString)\n- {string} **dateString** - date string\n- {string} **formatString** - format string\n```javascript\ndate.isValid('2015/01/02 23:14:05', 'YYYY/MM/DD HH:mm:ss'); // => true\ndate.isValid('29-02-2015', 'DD-MM-YYYY');                   // => false\n```\nThe `formatString` you can set is the same as the `parse` function's.\n\n### addYears(dateObj, years)\n- {object} **dateObj** - date object\n- {number} **years** - adding year\n```javascript\nlet now = new Date();\nlet next_year = date.addYears(now, 1);  // => Date object\n```\n\n### addMonths(dateObj, months)\n- {object} **dateObj** - date object\n- {number} **months** - adding month\n```javascript\nlet now = new Date();\nlet next_month = date.addMonths(now, 1); // => Date object\n```\n\n### addDays(dateObj, days)\n- {object} **dateObj** - date object\n- {number} **days** - adding day\n```javascript\nlet now = new Date();\nlet yesterday = date.addDays(now, -1);  // => Date object\n```\n\n### addHours(dateObj, hours)\n- {object} **dateObj** - date object\n- {number} **hours** - adding hour\n```javascript\nlet now = new Date();\nlet an_hour_ago = date.addHours(now, -1); // => Date object\n```\n\n### addMinutes(dateObj, minutes)\n- {object} **dateObj** - date object\n- {number} **minutes** -  adding minute\n```javascript\nlet now = new Date();\nlet two_minutes_later = date.addMinutes(now, 2);    // => Date object\n```\n\n### addSeconds(dateObj, seconds)\n- {object} **dateObj** - date object\n- {number} **seconds** - adding second\n```javascript\nlet now = new Date();\nlet three_seconds_ago = date.addSeconds(now, -3);   // => Date object\n```\n\n### addMilliseconds(dateObj, milliseconds)\n- {object} **dateObj** - date object\n- {number} **milliseconds** - adding millisecond\n```javascript\nlet now = new Date();\nlet a_millisecond_later = date.addMilliseconds(now, 1); // => Date object\n```\n\n### subtract(dateObj1, dateObj2)\n- {object} **date1** - date object\n- {object} **date2** - date object\n```javascript\nlet today = new Date(2015, 0, 2);\nlet yesterday = new Date(2015, 0, 1);\n\ndate.subtract(today, yesterday).toDays();           // => 1 = today - yesterday\ndate.subtract(today, yesterday).toHours();          // => 24\ndate.subtract(today, yesterday).toMinutes();        // => 1440\ndate.subtract(today, yesterday).toSeconds();        // => 86400\ndate.subtract(today, yesterday).toMilliseconds();   // => 86400000\n```\n\n### isLeapYear(dateObj)\n- {object} **dateObj** - date object\n```javascript\nlet date1 = new Date(2015, 0, 2);\nlet date2 = new Date(2012, 0, 2);\ndate.isLeapYear(date1); // => false\ndate.isLeapYear(date2); // => true\n```\n\n### isSameDay(dateObj)\n- {object} **date1** - date object\n- {object} **date2** - date object\n```javascript\nlet date1 = new Date(2017, 0, 2, 0);        // Jan 2 2017 00:00:00\nlet date2 = new Date(2017, 0, 2, 23, 59);   // Jan 2 2017 23:59:00\nlet date3 = new Date(2017, 0, 1, 23, 59);   // Jan 1 2017 23:59:00\ndate.isSameDay(date1, date2);   // => true\ndate.isSameDay(date1, date3);   // => false\n```\n\n## Locale\nIt supports the following languages for now:  \n- Arabic (ar)\n- Azerbaijani (az)\n- Bengali (bn)\n- Burmese (my)\n- Chinese (zh-cn)\n- Chinese (zh-tw)\n- Czech (cs)\n- Dutch (nl)\n- English (en)\n- French (fr)\n- German (de)\n- Greek (el)\n- Hindi (hi)\n- Hungarian (hu)\n- Indonesian (id)\n- Italian (it)\n- Japanese (ja)\n- Javanese (jv)\n- Korean (ko)\n- Persian (fa)\n- Polish (pl)\n- Portuguese (pt)\n- Punjabi (pa-in)\n- Romanian (ro)\n- Russian (ru)\n- Serbian (sr)\n- Spanish (es)\n- Thai (th)\n- Turkish (tr)\n- Ukrainian (uk)\n- Uzbek (uz)\n- Vietnamese (vi)\n\nMonth, day of week, and meridiem are displayed in English by default. If you want to use other languages, can switch to them as follows:  \nNode.js:\n```javascript\nlet date = require('date-and-time');\ndate.locale('fr');  // French\ndate.format(new Date(), 'dddd D MMMM'); // => 'lundi 11 janvier'\n```\nbabelify:\n```javascript\nimport date from './date-and-time';\nimport './locale/it';\n\ndate.locale('it');  // Italian\ndate.format(new Date(), 'dddd D MMMM'); // => 'Lunedì 11 gennaio'\n```\nAMD:\n```javascript\nrequire(['date-and-time', 'locale/de'], function (date) {\n    date.locale('de');  // German\n    date.format(new Date(), 'dddd, D. MMMM');   // => 'Montag, 11. Januar'\n});\n```\nthe browser:\n```html\n<script src=\"date-and-time.min.js\"></script>\n<script src=\"locale/zh-cn.js\"></script>\n<script>\ndate.locale('zh-cn');  // Chinese\ndate.format(new Date(), 'MMMD日dddd');  // => '1月11日星期一'\n</script>\n```\n\n## Customizing\nYou can not only switch to other languages, but can customize them as you want:  \n```javascript\nlet now = new Date();\ndate.format(now, 'h:m A');  // => '12:34 p.m.'\n\ndate.setLocales('en', {\n    A: ['AM', 'PM']\n});\n\ndate.format(now, 'h:m A');  // => '12:34 PM'\n```\n\n## Browser Support\nChrome, Firefox, Safari, Opera, and Internet Explorer 6+.\n\n## License\nMIT\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/knowledgecode/date-and-time.git"
  },
  "scripts": {
    "compile": "./compile.sh date-and-time.js date-and-time.min.js",
    "test": "./test.sh"
  },
  "version": "0.6.3"
}
